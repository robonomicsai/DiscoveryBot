{"version":3,"sources":["dialog.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAiBA;;eAEG;YAEH;gBAGE,uBAAqB,IAAW;oBAAX,SAAI,GAAJ,IAAI,CAAO;gBAChC,CAAC;gBAEM,6BAAK,GAAZ;oBACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,aAAa,CAAC,CAAC,GAAG,CAAE,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC/D,CAAC;gBACM,+BAAO,GAAd,UAAgB,YAAY,EAAE,eAAe;oBAC3C,IAAI,OAAO,GAAG,IAAI,cAAO,EAAG,CAAC;oBAC7B,OAAO,CAAC,MAAM,CAAE,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBAEpD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACjB,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;wBACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,uCAAuC,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,UAAU,EAC/F,IAAI,CAAC,SAAS,CAAE,eAAe,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC,GAAG,CAAE,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAG,EAAX,CAAW,CAAC,CAAC;oBACnF,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,+BAA+B,CAAC;oBACxC,CAAC;gBACH,CAAC;gBArBH;oBAAC,iBAAU,EAAG;;iCAAA;gBAsBd,oBAAC;YAAD,CArBA,AAqBC,IAAA;YArBD,yCAqBC,CAAA","file":"dialog.service.js","sourcesContent":["/**\n * (C) Copyright IBM Corp. 2016. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\nimport {Injectable} from 'angular2/core';\nimport {Http, Headers} from 'angular2/http';\nimport 'rxjs/add/operator/map';\n\n/*\n * This class is responsible for making REST calls to trigger setup process or call Conversation service.\n */\n@Injectable ()\nexport class DialogService {\n  private workspace_id : string;\n\n  constructor (private http : Http) {\n  }\n\n  public setup () {\n    return this.http.get ('/rest/setup').map (res => res.json());\n  }\n  public message (workspace_id, payloadToWatson) {\n    let headers = new Headers ();\n    headers.append ('Content-Type', 'application/json');\n\n    if (workspace_id) {\n      payloadToWatson = payloadToWatson || {};\n      return this.http.post ('/rest/conversation/api/v1/workspaces/' + workspace_id.trim() + '/message',\n        JSON.stringify (payloadToWatson), {headers: headers}).map (res => res.json ());\n    } else {\n      throw 'workspace_id must be defined!';\n    }\n  }\n}\n"]}